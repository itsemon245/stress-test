# DEDICATED WEBSOCKET SERVER CONFIGURATION
# Optimized for high-volume Reverb WebSocket connections
# Separates WebSocket load from static asset serving

map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

server {
    listen                         *:80;
    listen                      [::]:80;
    
    # SSL configuration
    listen                         *:443 ssl http2;
    listen                      [::]:443 ssl http2;
    
    server_name                 ws.artistly.ai;
    
    # SSL certificates - you'll need to obtain these
    ssl_certificate             /etc/letsencrypt/live/ws.artistly.ai/fullchain.pem;
    ssl_certificate_key         /etc/letsencrypt/live/ws.artistly.ai/privkey.pem;
    
    # SSL optimization for WebSocket connections
    ssl_session_cache           shared:SSL_WS:10m;
    ssl_session_timeout         24h;  # Longer for persistent WebSocket connections
    ssl_protocols               TLSv1.2 TLSv1.3;
    ssl_ciphers                 ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!SHA1:!WEAK;
    ssl_prefer_server_ciphers   off;  # Let client choose (better for WebSocket)
    
    # CRITICAL: Optimized for high WebSocket connection volume
    # Higher = Better performance under high concurrent WebSocket load
    # Lower = More conservative resource usage
    # Impact: Optimized for 500+ concurrent WebSocket connections
    client_body_buffer_size     1M;    # Small buffers for WebSocket handshakes
    client_max_body_size        10M;   # WebSocket messages shouldn't be huge
    client_body_timeout         30;    # Quick timeout for non-WebSocket requests
    client_header_timeout       30;    # Quick header processing
    
    # CRITICAL: Connection limiting for WebSocket server
    # Higher = More WebSocket connections allowed per IP
    # Lower = Better protection but may block legitimate high-traffic
    # Impact: Dedicated WebSocket server can handle higher limits safely
    limit_conn perip 1000;  # Much higher than web server (no asset competition)
    
    # Disable access logging for performance (optional)
    # access_log off;
    access_log                  /var/log/nginx/ws.artistly.ai_access.log main;
    error_log                   /var/log/nginx/ws.artistly.ai_error.log info;
    
    # CRITICAL: Dedicated WebSocket proxy location
    location /app {
        # CRITICAL: Proxy to Reverb with WebSocket optimization
        # Multiple upstream servers for load balancing
        proxy_pass http://127.0.0.1:7001;
        
        # WebSocket protocol headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Authentication headers for private channels
        proxy_set_header Cookie $http_cookie;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Origin $http_origin;
        
        # CRITICAL: WebSocket-optimized proxy settings
        # Higher timeouts = Better support for long-lived WebSocket connections
        # Lower timeouts = Faster cleanup but may kill legitimate connections
        # Impact: Long timeouts essential for persistent WebSocket connections
        proxy_connect_timeout       30s;   # Quick connection establishment
        proxy_read_timeout          86400s; # 24 hours for persistent connections
        proxy_send_timeout          30s;    # Quick send timeout
        
        # CRITICAL: Disable proxy buffering for real-time WebSocket communication
        # Off = True real-time, no message buffering
        # On = Better for large messages but adds latency
        # Impact: WebSocket requires real-time, no buffering
        proxy_buffering             off;
        proxy_request_buffering     off;
        
        # CRITICAL: Buffer optimization for WebSocket handshakes and control frames
        # Higher = Better handling of connection bursts and control messages
        # Lower = More memory efficient but may cause handshake issues
        # Impact: Optimized for high concurrent WebSocket establishment
        proxy_buffer_size           64k;
        proxy_buffers               8 64k;
        
        # CRITICAL: Connection management for high-volume WebSocket server
        # Higher = Better performance under sustained WebSocket load  
        # Lower = More conservative but may cause connection drops
        # Impact: Prevents connection drops during concurrent WebSocket establishment
        proxy_socket_keepalive      on;
        proxy_next_upstream         error timeout;
        proxy_next_upstream_timeout 3s;
        proxy_next_upstream_tries   1;
    }
    
    # CRITICAL: Health check endpoint for monitoring
    location /health {
        access_log off;
        return 200 "WebSocket server healthy\n";
        add_header Content-Type text/plain;
    }
    
    # CRITICAL: Block all other traffic - this is WebSocket-only server
    location / {
        # Return 444 (close connection) for non-WebSocket requests
        # Impact: Prevents abuse and resource waste on dedicated WebSocket server
        return 444;
    }
    
    # Block common probe paths
    location ~ ^/(favicon\.ico|robots\.txt|sitemap\.xml)$ {
        return 444;
    }
    
    # Security: Block all other file extensions
    location ~ \.(php|html|htm|xml|txt)$ {
        return 444;
    }
}

# CRITICAL: Load balancer upstream for multiple Reverb instances
# Uncomment and modify when ready to scale to multiple Reverb instances
# upstream reverb_cluster {
#     # CRITICAL: Load balancing across multiple Reverb instances
#     # Higher weight = More connections to that instance
#     # Lower weight = Fewer connections, good for slower instances
#     # Impact: Distributes WebSocket load across multiple Reverb processes
#     server 127.0.0.1:7001 weight=2;  # Primary instance
#     server 127.0.0.1:7002;
#     server 127.0.0.1:7003; 
#     server 127.0.0.1:7004;
#     server 127.0.0.1:7005;
#     
#     # CRITICAL: Session persistence for WebSocket connections
#     # ip_hash = Same client always goes to same Reverb instance
#     # least_conn = Distribute based on active connection count  
#     # Impact: ip_hash required for WebSocket session consistency
#     ip_hash;
#     
#     # Health checking for Reverb instances
#     # server 127.0.0.1:7001 max_fails=3 fail_timeout=30s;
# }
#
# Then change proxy_pass to: proxy_pass http://reverb_cluster;
